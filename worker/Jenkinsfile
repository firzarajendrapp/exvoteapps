pipeline {

  agent none

  stages{
      stage("build"){
        when{
            changeset "**/worker/**"
          }

        agent{
          docker{
            image 'maven:3.6.1-jdk-8-slim'
            args '-v $HOME/.m2:/root/.m2'
          }
        }

        steps{
          echo 'Compiling worker app..'
          dir('worker'){
            sh 'mvn compile'
          }
        }
      }
      stage("test"){
        when{
          changeset "**/worker/**"
        }
        agent{
          docker{
            image 'maven:3.6.1-jdk-8-slim'
            args '-v $HOME/.m2:/root/.m2'
          }
        }
        steps{
          echo 'Running Unit Tets on worker app..'
          dir('worker'){
            sh 'mvn clean test'
           }

          }
      }
      stage("package"){
        when{
          branch 'master'
          changeset "**/worker/**"
        }
        agent{
          docker{
            image 'maven:3.6.1-jdk-8-slim'
            args '-v $HOME/.m2:/root/.m2'
          }
        }
        steps{
          echo 'Packaging worker app'
          dir('worker'){
            sh 'mvn package -DskipTests'
            archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
          }

        }
      }

      stage('docker-package'){
          agent any
          when{
            changeset "**/worker/**"
            branch 'master'
          }
          steps{
            echo 'Packaging worker app with docker'
            script{
              docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
                  def workerImage = docker.build("initcron/worker:v${env.BUILD_ID}", "./worker")
                  workerImage.push()
                  workerImage.push("${env.BRANCH_NAME}")
                  workerImage.push("latest")
              }
            }
          }
      }
  }

  post{
    always{
        echo 'Building multibranch pipeline for worker is completed..'
    }
  }
}

stage('docker-package'){
  agent any
  steps{
    echo 'Packaging worker app with docker'script{
      docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
        def workerImage = docker.build("xxxx/worker:v${env.BUILD_ID}", "./
worker")
        workerImage.push()
        workerImage.push("latest")
      }
    }
  }
}

pipeline{

  agent{
    docker{
      image 'maven:3.6.1-jdk-8-slim'
      args '-v $HOME/.m2:/root/.m2'
    }
  }
  stages{
    stage('build'){
      steps{
        echo 'building worker app'
        dir('worker'){
          sh 'mvn compile'
      }
    }
  }
    stage('test'){
      steps{echo 'running unit tests on worker app'
      dir('worker'){
        sh 'mvn clean test'
      }
    }
  }

    stage('package'){
      steps{
        echo 'packaging worker app into a jarfile'
        dir('worker'){
          sh 'mvn package -DskipTests'
          archiveArtifacts artifacts: '**/target/*.jar', fingerprint:
true
      }
    }
  }

    stage('docker-package'){
      agent any
      steps{
        echo 'Packaging worker app with docker'
        script{
          docker.withRegistry('https://index.docker.io/v1/',
'dockerlogin') {
  def workerImage = docker.build("frzzz/worker:v$
  {env.BUILD_ID}", "./worker")
  workerImage.push()
  workerImage.push("latest")
        }
      }
    }
  }
}

  post{
    always{
      echo 'the job is complete'
    }
  }
}


    stage('deploy to dev'){
        agent any
        when{
            branch 'master'
        }
        steps{
            echo 'Deploy instavote app with docker compose'
            sh "scp -o StrictHostKeyChecking=no docker-compose.yml root@10.10.81.151:/root" 
            sh 'ssh -o StrictHostKeyChecking=no root@10.10.81.151 "docker-composer down --volumes 2>/dev/null" ' 
            sh 'ssh -o StrictHostKeyChecking=no root@10.10.81.151 "docker-composer up -d" '
        }
    }
    
  }
  post{
    always{
      echo 'Building multibranch pipeline for worker is completed..'
    }
    failure {
      slackSend (channel: "instavote", message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
    }
    success {
      slackSend (channel: "instavote", message: "Build Succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
    }
  }
}
